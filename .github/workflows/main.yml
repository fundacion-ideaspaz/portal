name: Sync static website to AWS S3 bucket

# Step 1: Sync files to S3 bucket
# Step 2: Generate cache invalidation only for files changed
# Step 3: Invalidate Cloufront cache

on:
  push:
    branches:
    - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get short commit SHA
        run: echo "short_sha=${{ github.sha::7 }}" >> $GITHUB_ENV

      # Full sync on every build - atomic deploy
      - name: Sync files
        run: aws s3 sync . ${{ secrets.AWS_BUCKET }}/${{ env.short_sha }}
          --delete
          --only-show-errors
          --exclude '.git/*'
          --exclude '.github/*'
          --exclude '.gitignore'
          --exclude '*/.DS_Store'
          --exclude '*/.gitkeep'
          --exclude '*/.meta/*'
          --exclude 'README.md'

      # Get the current CloudFront distribution's configure
      - name: Get distribution config and output it to a file
        run: aws cloudfront get-distribution-config --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} > /tmp/output.json

      # This takes the JSON file, removes the ETag field, selects the
      # appropriate distribution config item, and sets the origin path
      # to the S3 folder we expect. It then spits that config out to
      # its own file
      - name: Remove ETag field and update origin path
        run: cat /tmp/output.json | jq "del(.ETag) | (.DistributionConfig.Origins.Items[] | select(.Id == \"${{ secrets.AWS_CLOUDFRONT_ORIGIN_ID }}\")).OriginPath = \"/${{ env.short_sha }}\" | .DistributionConfig" > /tmp/updated-config.json

      # AWS CLI Requires us to specify the etag from this request, to make
      # sure nobody has made a change since we last pulled the config.
      # This extracts the content of that tag. The -r parameter outputs
      # the field as "raw" data, without quotes, which we want for our
      # variable.
      - name: Set env ETag variable
        run: echo "etag=`cat /tmp/output.json | jq -r ".ETag"`" >> $GITHUB_ENV

      # Pass in the modified configuration file and the etag value to
      # the cli command to update the distribution.
      - name: Update the distribution config
        run: aws cloudfront update-distribution
          --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          --if-match="${{ env.etag }}"
          --distribution-config file:///tmp/updated-config.json

      - name: Wait for distribution to be deployed
        run: aws cloudfront wait distribution-deployed
          --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}

      # Get list of files changed on the last commit with git diff-tree --no-commit-id --name-only -r ${{ github.sha }}
      # Add trailing slash to every line to comply with Cloudfrount invalidation url rules with awk '{print "/"$1}'
      # Remove no website content with sed '/.github/d'
      # Add / as the last line of the diff to always invalidate index.html
      # Save count lines on env variable for the invalidation quantity param
      - name: Compare differences and build invalidation payload
        run: |
          git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk '{print "/"$1}' | sed '/.github/d' > /tmp/diff
          echo "lines=`cat /tmp/diff | wc -l | sed 's/^ *//g'`" >> $GITHUB_ENV

      # Generate proper json file with jq
      - name: Build invalidation payload
        if: ${{ env.lines > 0 && env.lines <= 50 }}
        run: jq --raw-input --slurp 'sub("\n$";"") | split("\n")' /tmp/diff | jq '{"Paths":{"Quantity":'env.lines'|tonumber, "Items":.}, "CallerReference":"'${{ github.sha }}'"}' > /tmp/invalidation.json

      - name: Create cache invalidation
        if: ${{ env.lines > 0 && env.lines <= 50 }}
        run: aws cloudfront create-invalidation
          --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          --invalidation-batch file:///tmp/invalidation.json

      - name: Full cache invalidation
        if: env.lines > 50
        run: aws cloudfront create-invalidation
          --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          --paths "/*"

      - name: Slack notification when sync ends
        if: env.lines > 0
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo, workflow, message, commit, author, took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          if: always() # Pick up events even if the job fails or is canceled.
